<?xml version="1.0" encoding="utf-8"?> 

<!--
Very good intro:
@see https://code.msdn.microsoft.com/windowsdesktop/Writing-type-visualizers-2eae77a2
See also:
@see http://blogs.msdn.com/b/vcblog/archive/2013/06/28/using-visual-studio-2013-to-write-maintainable-native-visualizations-natvis.aspx?PageIndex=2
@see http://blogs.msdn.com/b/vcblog/archive/2015/09/28/debug-visualizers-in-visual-c-2015.aspx
@see http://stackoverflow.com/questions/36883414/limit-display-of-char-in-natvis-file-to-specific-length
-->

<AutoVisualizer xmlns="http://schemas.microsoft.com/vstudio/debugger/natvis/2010">

  <Type Name="c4::span&lt;*&gt;">
    <DisplayString>{m_ptr,[m_size]} (sz={m_size})</DisplayString>
    <Expand>
      <Item Name="[size]">m_size</Item>
      <ArrayItems>
        <Size>m_size</Size>
        <ValuePointer>m_ptr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="c4::spanrs&lt;*&gt;">
    <DisplayString>{m_ptr,[m_size]} (sz={m_size}, cap={m_capacity})</DisplayString>
    <Expand>
      <Item Name="[size]">m_size</Item>
      <Item Name="[capacity]">m_capacity</Item>
      <ArrayItems>
        <Size>m_size</Size>
        <ValuePointer>m_ptr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <!-- display span<char>/span<const char> as a string too -->
  <Type Name="c4::span&lt;char,*&gt;">
    <DisplayString>{m_ptr,[m_size]} (sz={m_size})</DisplayString>
    <StringView>m_ptr,[m_size]</StringView>
    <Expand>
      <Item Name="[size]">m_size</Item>
      <ArrayItems>
        <Size>m_size</Size>
        <ValuePointer>m_ptr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="c4::span&lt;const char,*&gt;">
    <DisplayString>{m_ptr,[m_size]} (sz={m_size})</DisplayString>
    <StringView>m_ptr,[m_size]</StringView>
    <Expand>
      <Item Name="[size]">m_size</Item>
      <ArrayItems>
        <Size>m_size</Size>
        <ValuePointer>m_ptr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <!-- display spanrs<char>/spanrs<const char> as a string too -->
  <Type Name="c4::spanrs&lt;char,*&gt;">
    <DisplayString>{m_ptr,[m_size]} (sz={m_size}, cap={m_capacity})</DisplayString>
    <StringView>m_ptr,[m_size]</StringView>
    <Expand>
      <Item Name="[size]">m_size</Item>
      <Item Name="[capacity]">m_capacity</Item>
      <ArrayItems>
        <Size>m_size</Size>
        <ValuePointer>m_ptr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="c4::spanrs&lt;const char,*&gt;">
    <DisplayString>{m_ptr,[m_size]} (sz={m_size}, cap={m_capacity})</DisplayString>
    <StringView>m_ptr,[m_size]</StringView>
    <Expand>
      <Item Name="[size]">m_size</Item>
      <Item Name="[capacity]">m_capacity</Item>
      <ArrayItems>
        <Size>m_size</Size>
        <ValuePointer>m_ptr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="c4::string_impl&lt;*,*,*,*&gt;">
    <DisplayString>{(($T3*)this)->m_str,[(($T3*)this)->m_size]} (sz={(($T3*)this)->m_size})</DisplayString>
    <StringView>(($T3*)this)->m_str,[(($T3*)this)->m_size]</StringView>
    <Expand>
      <Synthetic Name="m_str">
        <DisplayString>{(($T3*)this)->m_str,[(($T3*)this)->m_size]}</DisplayString>
        <StringView>(($T3*)this)->m_str,[(($T3*)this)->m_size]</StringView>
      </Synthetic>
      <Synthetic Name="m_size">
        <DisplayString>{(($T3*)this)->m_size}</DisplayString>
      </Synthetic>
    </Expand>
  </Type>
  <Type Name="c4::basic_substring&lt;*,*&gt;">
    <DisplayString>{m_str,[m_size]} (sz={m_size})</DisplayString>
    <StringView>m_str,[m_size]</StringView>
    <Expand>
      <Synthetic Name="[size]">
        <DisplayString>{m_size}</DisplayString>
      </Synthetic>
    </Expand>
  </Type>
  <Type Name="c4::basic_substringrs&lt;*,*&gt;">
    <DisplayString>{m_str,[m_size]} (sz={m_size},cap={m_capacity})</DisplayString>
    <StringView>m_str,[m_size]</StringView>
    <Expand>
      <Synthetic Name="[size]">
        <DisplayString>{m_size}</DisplayString>
      </Synthetic>
      <Synthetic Name="[capacity]">
        <DisplayString>{m_capacity}</DisplayString>
      </Synthetic>
      <Synthetic Name="[full]">
        <DisplayString>{m_str,[m_capacity]}</DisplayString>
        <StringView>m_str,[m_capacity]</StringView>
      </Synthetic>
    </Expand>
  </Type>
  <Type Name="c4::basic_string&lt;*,*,*&gt;">
    <DisplayString>{m_str,[m_size]} (sz={m_size},cap={m_capacity})</DisplayString>
    <StringView>m_str,[m_size]</StringView>
    <Expand>
      <Synthetic Name="[size]">
        <DisplayString>{m_size}</DisplayString>
      </Synthetic>
      <Synthetic Name="[full]">
        <DisplayString>{m_str,[m_capacity]}</DisplayString>
        <StringView>m_str,[m_capacity]</StringView>
      </Synthetic>
    </Expand>
  </Type>
  <Type Name="c4::basic_small_string&lt;*,*,*&gt;">
    <DisplayString Condition="(m_short.flag_n_sz &amp; 1) == 0">{m_short.arr,[m_short.flag_n_sz >> 1]} (sz={m_short.flag_n_sz >> 1},cap={arr_size}) [SHORT]</DisplayString>
    <DisplayString Condition="(m_short.flag_n_sz &amp; 1) == 1">{m_long.str,[m_long.flag_n_sz >> 1]} (sz={m_long.flag_n_sz >> 1},cap={m_long.cap}) [LONG]</DisplayString>
    <StringView Condition="(m_short.flag_n_sz &amp; 1) == 0">m_short.arr,[m_short.flag_n_sz >> 1]</StringView>
    <StringView Condition="(m_short.flag_n_sz &amp; 1) == 1">m_long.str,[m_long.flag_n_sz >> 1]</StringView>
    <Expand>
      <Synthetic Name="[string]">
        <DisplayString Condition="(m_short.flag_n_sz &amp; 1) == 0">{m_short.arr,[m_short.flag_n_sz >> 1]}</DisplayString>
        <DisplayString Condition="(m_short.flag_n_sz &amp; 1) == 1">{m_long.str,[m_long.flag_n_sz >> 1]}</DisplayString>
        <StringView Condition="(m_short.flag_n_sz &amp; 1) == 0">m_short.arr,[m_short.flag_n_sz >> 1]</StringView>
        <StringView Condition="(m_short.flag_n_sz &amp; 1) == 1">m_long.str,[m_long.flag_n_sz >> 1]</StringView>
      </Synthetic>
      <Synthetic Name="[size]">
        <DisplayString Condition="(m_short.flag_n_sz &amp; 1) == 0">{m_short.flag_n_sz >> 1}</DisplayString>
        <DisplayString Condition="(m_short.flag_n_sz &amp; 1) == 1">{m_long.flag_n_sz >> 1}</DisplayString>
      </Synthetic>
      <Synthetic Name="[capacity]">
        <DisplayString Condition="(m_short.flag_n_sz &amp; 1) == 0">{arr_size}</DisplayString>
        <DisplayString Condition="(m_short.flag_n_sz &amp; 1) == 1">{m_long.cap}</DisplayString>
      </Synthetic>
      <Synthetic Name="[mode]">
        <DisplayString Condition="(m_short.flag_n_sz &amp; 1) == 0">[SHORT]</DisplayString>
        <DisplayString Condition="(m_short.flag_n_sz &amp; 1) == 1">[LONG]</DisplayString>
      </Synthetic>
      <Synthetic Name="[full]">
        <DisplayString Condition="(m_short.flag_n_sz &amp; 1) == 0">{m_short.arr,[arr_size]}</DisplayString>
        <DisplayString Condition="(m_short.flag_n_sz &amp; 1) == 1">{m_long.str,[m_long.cap]}</DisplayString>
        <StringView Condition="(m_short.flag_n_sz &amp; 1) == 0">m_short.arr,[arr_size]</StringView>
        <StringView Condition="(m_short.flag_n_sz &amp; 1) == 1">m_long.str,[m_long.cap]</StringView>
      </Synthetic>
    </Expand>
  </Type>
  <Type Name="c4::string_impl&lt;*,*,c4::basic_small_string&lt;*,*,*&gt;,*&gt;">
    <DisplayString Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 0">{((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.arr,[((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz >> 1]} (sz={((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz >> 1},cap={((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->arr_size}) [SHORT]</DisplayString>
    <DisplayString Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 1">{((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_long.str,[((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_long.flag_n_sz >> 1]} (sz={((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_long.flag_n_sz >> 1},cap={((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_long.cap}) [LONG]</DisplayString>
    <StringView Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 0">((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.arr,[((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz >> 1]</StringView>
    <StringView Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 1">((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_long.str,[((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_long.flag_n_sz >> 1]</StringView>
    <Expand>
      <Synthetic Name="[size]">
        <DisplayString Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 0">{((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz >> 1}</DisplayString>
        <DisplayString Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 1">{((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_long.flag_n_sz >> 1}</DisplayString>
      </Synthetic>
      <Synthetic Name="[capacity]">
        <DisplayString Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 0">{((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->arr_size}</DisplayString>
        <DisplayString Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 1">{((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_long.cap}</DisplayString>
      </Synthetic>
      <Synthetic Name="[mode]">
        <DisplayString Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 0">[SHORT]</DisplayString>
        <DisplayString Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 1">[LONG]</DisplayString>
      </Synthetic>
      <Synthetic Name="[full]">
        <DisplayString Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 0">{((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.arr,[((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->arr_size]}</DisplayString>
        <DisplayString Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 1">{((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_long.str,[((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_long.cap]}</DisplayString>
        <StringView Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 0">((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.arr,[((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->arr_size]</StringView>
        <StringView Condition="(((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_short.flag_n_sz &amp; 1) == 1">((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_long.str,[((c4::basic_small_string&lt;$T1,$T2,$T5&gt;*)this)->m_long.cap]</StringView>
      </Synthetic>
    </Expand>
  </Type>
  
  <Type Name="c4::sstream">
    <DisplayString>{m_buf,[m_size]} (sz={m_size})</DisplayString>
    <StringView>m_buf,[m_size]</StringView>
    <Expand>
      <Synthetic Name="put">
        <DisplayString>{m_buf,[m_putpos]} (sz={m_putpos})</DisplayString>
        <StringView>m_buf,[m_putpos]</StringView>
      </Synthetic>
      <Synthetic Name="get (unread)">
        <DisplayString>{m_buf+m_getpos,[m_putpos-m_getpos]} (sz={m_putpos-m_getpos})</DisplayString>
        <StringView>m_buf+m_getpos,[m_putpos-m_getpos]</StringView>
      </Synthetic>
      <Synthetic Name="get (read)">
        <DisplayString>{m_buf,[m_getpos]} (sz={m_getpos})</DisplayString>
        <StringView>m_buf,[m_getpos]</StringView>
      </Synthetic>
    </Expand>
  </Type>

  <Type Name="c4::raw_fixed&lt;*,*,*,*&gt;">
    <DisplayString>{{cap={$T2}}}</DisplayString>
    <Expand>
      <Item Name="[capacity]">$T2</Item>
      <ArrayItems>
        <Size>$T3</Size>
        <ValuePointer>m_arr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="c4::raw&lt;*,*,*,*,*&gt;">
    <DisplayString>{{cap={m_capacity}}}</DisplayString>
    <Expand>
      <Item Name="[capacity]">m_capacity</Item>
      <ArrayItems>
        <Size>m_capacity</Size>
        <ValuePointer>m_ptr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="c4::raw_small&lt;*,*,*,*,*,*&gt;">
    <DisplayString Condition="m_capacity &lt;= $T2">{{cap={m_capacity}}} [SHORT]</DisplayString>
    <DisplayString Condition="m_capacity &gt;  $T2">{{cap={m_capacity}}} [LONG]</DisplayString>
    <Expand>
      <Item Name="[capacity]">m_capacity</Item>
      <Item Name="[status]" Condition="m_capacity &lt;= $T2">[SHORT]</Item>
      <Item Name="[status]" Condition="m_capacity &gt;  $T2">[LONG]</Item>
      <ArrayItems>
        <Size>m_capacity</Size>
        <ValuePointer Condition="m_capacity &lt;= $T2">m_arr</ValuePointer>
        <ValuePointer Condition="m_capacity &gt;  $T2">m_ptr</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="c4::raw_paged&lt;*,*,*,*,*&gt;">
    <DisplayString>{{cap={ {$T2} * {m_num_pages} } pg_sz={$T2} num_pgs={m_num_pages}}}</DisplayString>
    <Expand>
      <Item Name="[capacity]">$T2 * m_num_pages</Item>
      <Item Name="[page size]">$T2</Item>
      <Item Name="[num pages]">m_num_pages</Item>
      <ArrayItems>
        <Size>m_num_pages</Size>
        <ValuePointer>m_pages</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>
  <Type Name="c4::raw_paged&lt;*,0,*,*,*&gt;">
    <DisplayString>{{cap={ ({m_id_mask}+1) * {m_num_pages} } pg_sz={m_id_mask+1} num_pgs={m_num_pages}}}</DisplayString>
    <Expand>
      <Item Name="[capacity]">(m_id_mask+1) * m_num_pages</Item>
      <Item Name="[page size]">(m_id_mask+1)</Item>
      <Item Name="[num pages]">m_num_pages</Item>
      <ArrayItems>
        <Size>m_num_pages</Size>
        <ValuePointer>m_pages</ValuePointer>
      </ArrayItems>
    </Expand>
  </Type>

  <Type Name="c4::flat_list&lt;*,*,c4::raw_paged&lt;*,*,*,*,*&gt;&gt;">
    <DisplayString>{{sz={m_size}}}</DisplayString>
    <Expand>
      <!-- https://msdn.microsoft.com/en-us/library/jj620914.aspx -->
      <CustomListItems MaxItemsPerView="5000" ExcludeView="Test">
        <Variable Name="cursor" InitialValue="m_head" />
        <Size>m_size</Size>
        <Loop>
          <If Condition="cursor != npos">
            <Item>m_elms.m_pages[cursor >> m_elms._raw_page_lsb][cursor &amp; m_elms._raw_id_mask].elm</Item>
            <Exec>cursor = m_elms.m_pages[cursor >> m_elms._raw_page_lsb][cursor &amp; m_elms._raw_id_mask].next</Exec>
          </If>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>
  <Type Name="c4::flat_list&lt;*,*,c4::raw_paged&lt;*,0,*,*,*&gt;&gt;">
    <DisplayString>{{sz={m_size}}}</DisplayString>
    <Expand>
      <!-- https://msdn.microsoft.com/en-us/library/jj620914.aspx -->
      <CustomListItems MaxItemsPerView="5000" ExcludeView="Test">
        <Variable Name="cursor" InitialValue="m_head" />
        <Size>m_size</Size>
        <Loop>
          <If Condition="cursor != npos">
            <Item>m_elms.m_pages[cursor >> m_elms.m_page_lsb][cursor &amp; m_elms.m_id_mask].elm</Item>
            <Exec>cursor = m_elms.m_pages[cursor >> m_elms.m_page_lsb][cursor &amp; m_elms.m_id_mask].next</Exec>
          </If>
        </Loop>
      </CustomListItems>
    </Expand>
  </Type>

</AutoVisualizer>
